module i11eperf {
  /* The "ts" field stores a time stamp and is used in lieu of the DDS source timestamp
     for two reasons:

     - Fast-DDS doesn't support write_w_timestamp

     - All variants have different ideas of the representation of a time stamp,
       this avoids the need for different conversions in the different cases 

     @final @data_representation(XCDR1): the spec breaks backwards compatibility, with some
     implementations (OpenDDS, for example) following it, and some choosing not to break
     things just because a generally pretty low-quality spec says one must (Cyclone DDS).

     Keep all annotations on a single line starting with @topic for preproc-ospl-idl.gawk */

  @topic @final @data_representation(XCDR1)
  struct ou {
    unsigned long long ts;
    unsigned long s;
  };

  @topic @final @data_representation(XCDR1)
  struct a32 {
    unsigned long long ts;
    unsigned long s;
    octet xary[32 - 12];
  };

  @topic @final @data_representation(XCDR1)
  struct a128 {
    unsigned long long ts;
    unsigned long s;
    octet xary[128 - 12];
  };

  @topic @final @data_representation(XCDR1)
  struct a1024 {
    unsigned long long ts;
    unsigned long s;
    octet xary[1024 - 12];
  };

  @topic @final @data_representation(XCDR1)
  struct a16k {
    unsigned long long ts;
    unsigned long s;
    octet xary[16*1024 - 12];
  };

  @topic @final @data_representation(XCDR1)
  struct a48k {
    unsigned long long ts;
    unsigned long s;
    octet xary[48*1024 - 12];
  };

  @topic @final @data_representation(XCDR1)
  struct a64k {
    unsigned long long ts;
    unsigned long s;
    octet xary[64*1024 - 12];
  };

  @topic @final @data_representation(XCDR1)
  struct a1M {
    unsigned long long ts;
    unsigned long s;
    octet xary[1024*1024 - 12];
  };

  @topic @final @data_representation(XCDR1)
  struct a2M {
    unsigned long long ts;
    unsigned long s;
    octet xary[2*1024*1024 - 12];
  };

  @topic @final @data_representation(XCDR1)
  struct a4M {
    unsigned long long ts;
    unsigned long s;
    octet xary[4*1024*1024 - 12];
  };

  @topic @final @data_representation(XCDR1)
  struct a8M {
    unsigned long long ts;
    unsigned long s;
    octet xary[8*1024*1024 - 12];
  };

  @topic @final @data_representation(XCDR1)
  struct seq {
    unsigned long long ts;
    unsigned long s;
    sequence<octet> xseq;
  };

  ///////////

//module u {
//  module s {
      const string SERVICEINFO_TOPIC_NAME = "SERVICEINFO";
      typedef string<20> ServiceVersion_t;
      typedef unsigned short ServiceType_t;
      typedef string<32> HostName_t;
      typedef unsigned short  Port_t;

      enum ServiceState_t {
        SA,
        SB,
        SC
      };

      @nested @appendable
      struct GUID_t {
        unsigned long data1;
        unsigned long data2;
      };

      typedef double WGS84Coordinate_t;

      @nested @appendable
      struct WGS84Position2D_t {
        WGS84Coordinate_t latitude;
        WGS84Coordinate_t longitude;
      };

      @topic 
      @appendable
      struct ServiceInfo {
        @key GUID_t       id;
        ServiceType_t       type;
        ServiceVersion_t        version;
        WGS84Position2D_t       location;
        HostName_t              name;
        HostName_t              hostname;
            
        // this enum fails
        ServiceState_t          state;
            
        Port_t                  monitorPort;
      };
//  };
//};
};
